Function Description
====================
Fri Jan 19 10:56:10 MET 2001
 
Overview of all Functions
-------------------------

M43_GetEntry           - Gets the entry points of the low-level driver functions. 
M43_Init               - Allocates and initialize the LL structure 
M43_Exit               - Deinitializes the hardware (switch the relays off) 
M43_Read               - Reads input state from current channel. 
M43_Write              - Write ouput state to current channel. 
M43_SetStat            - Changes the device state. 
M43_GetStat            - Gets the device state. 
M43_BlockRead          - Read channels 0..('size'-1) of module into 'buf'. 
M43_BlockWrite         - Output values in 'buf' to channels 0..('size'-1) of module. 
M43_Irq                - (unused - the module have no interrupt ) 
M43_Info               - Gets low level driver info. 
Ident                  - Return ident string 
 

Function M43_GetEntry()
-----------------------

Syntax:
    #ifdef _ONE_NAMESPACE_PER_DRIVER_
        void LL_GetEntry( LL_ENTRY* drvP )
    #else
        void M43_GetEntry( LL_ENTRY* drvP )
    #endif /* _ONE_NAMESPACE_PER_DRIVER_ */

Description:
    Gets the entry points of the low-level driver functions.

    Note:  Is used by MDIS kernel only.

Input:
    ---

Output:
    drvP  pointer to the initialized structure


Function M43_Init()
-------------------

Syntax:
    int32 M43_Init(
        DESC_SPEC       *descSpec,
        OSS_HANDLE      *osHdl,
        MACCESS         *maHdl,
        OSS_SEM_HANDLE  *devSem,
        OSS_IRQ_HANDLE  *irqHdl,
        LL_HANDLE       **llHdlP)

Description:
    Allocates and initialize the LL structure
    Decodes descriptor
    Reads and checks the ID if in descriptor enabled
    Initialize the hardware
      - reset module (switch the relays off)
    The driver supports 8 digital outputs (relays),
    the relay status can be read out

    Deskriptor key        Default         Range/Unit
    ------------------------------------------------------------
    DEBUG_LEVEL           OSS_DBG_DEFAULT   see dbg.h
    DEBUG_LEVEL_DESC      OSS_DBG_DEFAULT   see dbg.h
    ID_CHECK              1                 0..1

Input:
    descSpec      descriptor specifier
    osHdl         pointer to the os specific structure
    maHdl         access handle
                  (in simplest case module base address)
    devSemHdl     device semaphore for unblocking in wait
    irqHdl        irq handle for mask and unmask interrupts
    llHdlP        pointer to the variable where low level driver
                  handle will be stored

Output:
    llHdlP        pointer to low level driver handle
    return        0 | error code


Function M43_Exit()
-------------------

Syntax:
    int32 M43_Exit(
        LL_HANDLE   **llHdlP)

Description:
    Deinitializes the hardware (switch the relays off)
    Frees allocated memory

Input:
    llHdlP        pointer to low level driver handle

Output:
    llHdlP        NULL
    return        0 | error code


Function M43_Read()
-------------------

Syntax:
    int32 M43_Read(
        LL_HANDLE   *llHdl,
        int32       ch,
        int32       *valueP)

Description:
    Reads input state from current channel.

Input:
    llHdl     pointer to low-level driver data structure
    ch        current channel

Output:
    valueP    read value
    return    0 | error code


Function M43_Write()
--------------------

Syntax:
    int32 M43_Write(
        LL_HANDLE   *llHdl,
        int32       ch,
        int32       value)

Description:
    Write ouput state to current channel.

Input:
    llHdl     pointer to ll-drv data structure
    ch        current channel
    value     switch on/off

Output:
    return    0 | error code


Function M43_SetStat()
----------------------

Syntax:
    int32 M43_SetStat(
        LL_HANDLE   *llHdl,
        int32       code,
        int32       ch,
        int32       valuevalue32_or_64)

Description:
    Changes the device state.

    common codes            values          meaning
    ---------------------------------------------------------------------
    M_LL_DEBUG_LEVEL        see dbg.h       enable/disable debug output
    M_LL_CH_DIR             M_CH_INOUT      channel direction

    M43 specific codes      values          meaning
    ---------------------------------------------------------------------
    -                       -               -

Input:
    llHdl         pointer to low-level driver data structure
    code          setstat code
    ch            current channel (0..8)
    value32_or_64 setstat value or pointer to blocksetstat data

Output:
    return    0 | error code


Function M43_GetStat()
----------------------

Syntax:
    int32 M43_GetStat(
        LL_HANDLE   *llHdl,
        int32       code,
        int32       ch,
        int32       *value32_or_64P)

Description:
    Gets the device state.

    common codes            values          meaning
    ---------------------------------------------------------------------
    M_LL_CH_NUMBER          8               number of channels

    M_LL_CH_DIR             M_CH_INOUT      direction of curr ch
                                             always inout

    M_LL_CH_LEN             1               channel length in bit

    M_LL_CH_TYP             M_CH_BINARY     channel type

    M_LL_ID_CHECK           0 or 1          check EEPROM-Id from module

    M_LL_DEBUG_LEVEL        see dbg.h       current debug level

    M_LL_ID_SIZE            128             eeprom size [bytes] 

    M_LL_BLK_ID_DATA        -               eeprom raw data         

    M_MK_BLK_REV_ID         pointer to the ident function table

    M43 specific codes      values          meaning
    ---------------------------------------------------------------------
    -                       -               -

Input:
    llHdl          pointer to low-level driver data structure
    code           getstat code
    ch             current channel (0..7)

Output:
    value32_or_64P pointer to getstat value or
                   pointer to blocksetstat data
    return         0 | error code


Function M43_BlockRead()
------------------------

Syntax:
    int32 M43_BlockRead(
         LL_HANDLE  *llHdl,
         int32      ch,
         void       *buf,
         int32      size,
         int32      *nbrRdBytesP)

Description:
    Read channels 0..('size'-1) of module into 'buf'.
    Channels will be read in rising order (0..size-1).

Input:
    llHdl         pointer to low-level driver data structure
    ch            current channel (always ignored)
    buf           buffer to store read values
    size          number of bytes to read (1..8)

Output:
    nbrRdBytesP   number of read bytes (0..8)
    return        0 | error code


Function M43_BlockWrite()
-------------------------

Syntax:
    int32 M43_BlockWrite(
         LL_HANDLE  *llHdl,
         int32      ch,
         void       *buf,
         int32      size,
         int32      *nbrWrBytesP
    )

Description:
    Output values in 'buf' to channels 0..('size'-1) of module.
    Channels will be written in rising order (0..size-1).

Input:
    llHdl         pointer to low-level driver data structure
    ch            current channel (always ignored)
    buf           buffer where output values are stored
    size          number of bytes to write (1..8)

Output:
    nbrWrBytesP   number of written bytes (0..8)
    return        0 | error code   


Function M43_Irq()
------------------

Syntax:
    int32 M43_Irq(
       LL_HANDLE    *llHdl)

Description:
    (unused - the module have no interrupt )

Input:
    llHdl  pointer to ll-drv data structure

Output:
    return LL_IRQ_DEV_NOT


Function M43_Info()
-------------------

Syntax:
    int32 M43_Info
    (
       int32  infoType,
       ...
    )

Description:
    Gets low level driver info.

    NOTE: can be called before M33_Init().

    supported info type codes       value          meaning
    ------------------------------------------------------------------------
    LL_INFO_HW_CHARACTER
    arg2  u_int32 *addrModeChar    MDIS_MA08       M-Module characteristic
    arg3  u_int32 *dataModeChar    MDIS_MD08       M-Module characteristic

    LL_INFO_ADDRSPACE_COUNT
    arg2  u_int32 *nbrOfMaddr    1               number of address spaces

    LL_INFO_ADDRSPACE
    arg2  u_int32 addrNr         0               current address space
    arg3  u_int32 *addrMode      MDIS_MA08       used address mode
    arg4  u_int32 *dataMode      MDIS_MD16       used data mode
    arg5  u_int32 *addrSize      0xff            needed size

    LL_INFO_IRQ
    arg2  u_int32 *useIrq        0               module use no interrupt

Input:
    infoType          desired information
    ...               variable argument list

Output:
    return            0 | error code


Function Ident()
----------------

Syntax:
    static char* Ident( void )

Description:
    Return ident string

Input:
    -

Output:
    return  ptr to ident string

