Function Description
====================
Fri Aug 21 16:00:14 WEDT 2009
 
Overview of all Functions
-------------------------

D203_GetEntry          - Initialize drivers jump table. 
D203_Init              - Allocate and return board handle. 
D203_BrdInit           - Board initialization. 
D203_BrdExit           - Board deinitialization. 
D203_Exit              - Cleanup memory. 
D203_BrdInfo           - Get information about hardware and driver requirements. 
D203_CfgInfo           - Get information about board configuration. 
D203_IrqEnable         - Interrupt enable / disable. 
D203_IrqSrvInit        - Called at the beginning of an interrupt. 
D203_IrqSrvExit        - Called at the end of an interrupt. 
D203_ExpEnable         - Exception interrupt enable / disable. 
D203_ExpSrv            - Called at the beginning of an exception interrupt. 
D203_SetMIface         - Set device interface. 
D203_ClrMIface         - Clear device interface. 
D203_GetMAddr          - Get physical address description. 
D203_SetStat           - Set driver status 
D203_GetStat           - Get driver status 
 

Function D203_GetEntry()
------------------------

Syntax:
    #ifdef _ONE_NAMESPACE_PER_DRIVER_
        extern void BBIS_GetEntry( BBIS_ENTRY *bbisP )
    #else
        extern void __D203_GetEntry( BBIS_ENTRY *bbisP )
    #endif

Description:
    Initialize drivers jump table.

Input:
    bbisP     pointer to the not initialized structure

Output:
    *bbisP    initialized structure


Function D203_Init()
--------------------

Syntax:
    static int32 D203_Init(
        OSS_HANDLE      *osHdl,
        DESC_SPEC       *descSpec,
        BBIS_HANDLE     **brdHdlP )

Description:
    Allocate and return board handle.

    - initializes the board handle
    - reads and saves board descriptor entries
    - assign resources
    - map used addresses

    The following descriptor keys are used:

    Deskriptor key         Default          Range
    ---------------------  ---------------  -------------------
    DEBUG_LEVEL_DESC       OSS_DBG_DEFAULT  see dbg.h
    DEBUG_LEVEL            OSS_DBG_DEFAULT  see dbg.h
    PCI_BUS_PATH           none             see pcibuspath.txt
    PCI_BUS_NUMBER         none             0...255
    PCI_BUS_SLOT           none             1...8
    PCI_DEVICE_ID          0xFFFF           0...31
    ID_CHECK               1                0, 1

    Either PCI_BUS_NUMBER or PCI_BUS_PATH must be specified
    If both are present, PCI_BUS_NUMBER takes precedence.

    PCI_DEVICE_ID overwrites PCI_BUS_SLOT. The device id can set
    directly.

Input:
    osHdl     pointer to os specific structure             
    descSpec  pointer to os specific descriptor specifier  
    brdHdlP   pointer to not initialized board handle structure            

Output:
    *brdHdlP  initialized board handle structure  
    return    0 | error code


Function D203_BrdInit()
-----------------------

Syntax:
    static int32 D203_BrdInit(
        BBIS_HANDLE     *brdHdl )

Description:
    Board initialization.

    - enable global interrupt

Input:
    brdHdl    pointer to board handle structure    

Output:
    return    0 | error code


Function D203_BrdExit()
-----------------------

Syntax:
    static int32 D203_BrdExit(
        BBIS_HANDLE     *brdHdl )

Description:
    Board deinitialization.

    - disable global interrupt

Input:
    brdHdl    pointer to board handle structure   

Output:
    return    0 | error code


Function D203_Exit()
--------------------

Syntax:
    static int32 D203_Exit(
        BBIS_HANDLE     **brdHdlP )

Description:
    Cleanup memory.

    - deinitializes the bbis handle

Input:
    brdHdlP   pointer to board handle structure

Output:
    *brdHdlP  NULL
    return    0 | error code


Function D203_BrdInfo()
-----------------------

Syntax:
    static int32 D203_BrdInfo(
        u_int32 code,
        ... )

Description:
    Get information about hardware and driver requirements.

    Following info codes are supported:

    Code                      Description
    ------------------------  -----------------------------
    BBIS_BRDINFO_BUSTYPE      board bustype
    BBIS_BRDINFO_DEVBUSTYPE   device bustype
    BBIS_BRDINFO_FUNCTION     used optional functions
    BBIS_BRDINFO_NUM_SLOTS    number of slots
    BBIS_BRDINFO_INTERRUPTS   interrupt characteristics
    BBIS_BRDINFO_ADDRSPACE    address characteristic
    BBIS_BRDINFO_BRDNAME      name of the board hardware

    The BBIS_BRDINFO_BUSTYPE code returns the bustype of
    the specified board.

    The BBIS_BRDINFO_DEVBUSTYPE code returns the bustype of
    the specified device - not the board bus type. 

    The BBIS_BRDINFO_FUNCTION code returns the information
    if an optional BBIS function is supported or not.

    The BBIS_BRDINFO_NUM_SLOTS code returns the number of
    devices used from the driver.

    The BBIS_BRDINFO_INTERRUPTS code returns the supported
    interrupt capability (BBIS_IRQ_DEVIRQ/BBIS_IRQ_EXPIRQ)
    of the specified device.

    The BBIS_BRDINFO_ADDRSPACE code returns the address
    characteristic (OSS_ADDRSPACE_MEM/OSS_ADDRSPACE_IO)
    of the specified device.

    The BBIS_BRDINFO_BRDNAME code returns the short hardware
    name and type of the board without any prefix or suffix.
    The hardware name must not contain any non-printing
    characters. The length of the returned string, including
    the terminating null character, must not exceed
    BBIS_BRDINFO_BRDNAME_MAXSIZE.
    Examples: D201 board, PCI device, Chameleon FPGA 

Input:
    code      reference to the information we need    
    ...       variable arguments                      

Output:
    *...      variable arguments
    return    0 | error code


Function D203_CfgInfo()
-----------------------

Syntax:
    static int32 D203_CfgInfo(
        BBIS_HANDLE     *brdHdl,
        u_int32         code,
        ... )

Description:
    Get information about board configuration.

    Following info codes are supported:

    Code                      Description
    ------------------------  ------------------------------
    BBIS_CFGINFO_BUSNBR       bus number
    BBIS_CFGINFO_IRQ          interrupt parameters
    BBIS_CFGINFO_EXP          exception interrupt parameters
    BBIS_CFGINFO_SLOT         slot information

    The BBIS_CFGINFO_BUSNBR code returns the number of the
    bus on which the board resides.

    The BBIS_CFGINFO_IRQ code returns the device interrupt
    vector, level and mode of the specified device.

    The BBIS_CFGINFO_EXP code returns the exception interrupt
    vector, level and mode of the specified device.

    The BBIS_CFGINFO_SLOT code returns the following
    information about the specified device slot:
    The slot is occupied or empty, the device id and device
    revision of the plugged device, the name of the slot and
    the name of the plugged device.

Input:
    brdHdl    pointer to board handle structure       
    code      reference to the information we need    
    ...       variable arguments                      

Output:
    .....:  ...       variable arguments
            return    0 | error code


Function D203_IrqEnable()
-------------------------

Syntax:
    static int32 D203_IrqEnable(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot,
        u_int32         enable )

Description:
    Interrupt enable / disable.

    Enable/disable interrupt for specified module slot

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  
    enable    interrupt setting                   

Output:
    return    0 | error code


Function D203_IrqSrvInit()
--------------------------

Syntax:
    static int32 D203_IrqSrvInit(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot)

Description:
    Called at the beginning of an interrupt.

    - determine interrupt reason 

    Note: Timeout interrupts will be cleared.
          Module interrupt must be cleared on the module
          itself and by D203_IrqSrvExit().

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  

Output:
    return    BBIS_IRQ_UNK


Function D203_IrqSrvExit()
--------------------------

Syntax:
    static void D203_IrqSrvExit(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot )

Description:
    Called at the end of an interrupt.

    - clear module interrupt

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  

Output:
    ---


Function D203_ExpEnable()
-------------------------

Syntax:
    static int32 D203_ExpEnable(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot,
        u_int32         enable)

Description:
    Exception interrupt enable / disable.

    Do nothing

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  
    enable    interrupt setting                   

Output:
    return    0


Function D203_ExpSrv()
----------------------

Syntax:
    static int32 D203_ExpSrv(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot )

Description:
    Called at the beginning of an exception interrupt.

    Do nothing

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  

Output:
    return    BBIS_IRQ_NO


Function D203_SetMIface()
-------------------------

Syntax:
    static int32 D203_SetMIface(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot,
        u_int32         addrMode,
        u_int32         dataMode)

Description:
    Set device interface.

    Do nothing

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  
    addrMode  MDIS_MODE_A08 | MDIS_MODE_A24       
    dataMode  MDIS_MODE_D2036 | MDIS_MODE_D32       

Output:
    return    0


Function D203_ClrMIface()
-------------------------

Syntax:
    static int32 D203_ClrMIface(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot)

Description:
    Clear device interface.

    Do nothing

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  

Output:
    return    0


Function D203_GetMAddr()
------------------------

Syntax:
    static int32 D203_GetMAddr(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot,
        u_int32         addrMode,
        u_int32         dataMode,
        void            **mAddr,
        u_int32         *mSize )

Description:
    Get physical address description.

    - check module slot number
    - assign address spaces

Input:
    brdHdl    pointer to board handle structure   
    mSlot     module slot number                  
    addrMode  MDIS_MA08  
    dataMode  MDIS_MD16 | MDIS_MD32      
    mAddr     pointer to address space            
    mSize     size of address space               

Output:
    return    0 | error code


Function D203_SetStat()
-----------------------

Syntax:
    static int32 D203_SetStat(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot,
        int32           code,
        INT32_OR_64     value32_or_64 )

Description:
    Set driver status

    Following status codes are supported:

    Code                 Description                Values
    -------------------  -------------------------  ----------
    M_BB_DEBUG_LEVEL     board debug level          see dbg.h
    M_BB_IRQ_EXP_COUNT   exception irq count        0..max

Input:
    brdHdl            pointer to board handle structure           
    mSlot             module slot number                          
    code              setstat code                                
    value32_or_64     setstat value or ptr to blocksetstat data   

Output:
    return    0 | error code


Function D203_GetStat()
-----------------------

Syntax:
    static int32 D203_GetStat(
        BBIS_HANDLE     *brdHdl,
        u_int32         mSlot,
        int32           code,
        INT32_OR_64     *value32_or_64P )

Description:
    Get driver status

    Following status codes are supported:

    Code                 Description                Values
    -------------------  -------------------------  ----------
    M_BB_DEBUG_LEVEL     driver debug level         see dbg.h
    M_BB_IRQ_EXP_COUNT   exception irq count        0..max
    M_BB_IRQ_VECT        interrupt vector           0..max
    M_BB_IRQ_LEVEL       interrupt level            0..max
    M_BB_IRQ_PRIORITY    interrupt priority         0
    M_BB_ID_CHECK        board id is checked        0..1
    M_BB_ID_SIZE         eeprom id-data size[bytes] 0
    M_MK_BLK_REV_ID      ident function table ptr   -

Input:
    brdHdl    pointer to board handle structure           
    mSlot     module slot number                          
    code      getstat code                                

Output:
    value32_or_64P    getstat value or ptr to blockgetstat data
    return    0 | error code

