Function Description
====================
Mon Jun 21 16:02:56 WEDT 2004
 
Overview of all Functions
-------------------------

CHAMELEON_GetEntry     - Initialize drivers jump table. 
CHAMELEON_Init         - Allocate and return board handle. 
CHAMELEON_BrdInit      - Board initialization. 
CHAMELEON_BrdExit      - Board deinitialization. 
CHAMELEON_Exit         - Cleanup memory. 
CHAMELEON_BrdInfo      - Get information about hardware and driver requirements. 
CHAMELEON_CfgInfo      - Get information about board configuration. 
CHAMELEON_IrqEnable    - Interrupt enable / disable. 
CHAMELEON_IrqSrvInit   - Called at the beginning of an interrupt. 
CHAMELEON_IrqSrvExit   - Called at the end of an interrupt. 
CHAMELEON_ExpEnable    - Exception interrupt enable / disable. 
CHAMELEON_ExpSrv       - Called at the beginning of an exception interrupt. 
CHAMELEON_SetMIface    - Set device interface. 
CHAMELEON_ClrMIface    - Clear device interface. 
CHAMELEON_GetMAddr     - Get physical address description. 
CHAMELEON_SetStat      - Set driver status 
CHAMELEON_GetStat      - Get driver status 
 

Function CHAMELEON_GetEntry()
-----------------------------

Syntax:
    #ifdef _ONE_NAMESPACE_PER_DRIVER_
        extern void BBIS_GetEntry( BBIS_ENTRY *bbisP )
    #else
        extern void CHAMELEON_GetEntry( BBIS_ENTRY *bbisP )
    #endif

Description:
    Initialize drivers jump table.

Input:
    bbisP     pointer to the not initialized structure

Output:
    *bbisP    initialized structure


Function CHAMELEON_Init()
-------------------------

Syntax:
    static int32 CHAMELEON_Init(
        OSS_HANDLE      *osHdl,
        DESC_SPEC       *descSpec,
        BBIS_HANDLE     **hP )

Description:
    Allocate and return board handle.

    - initializes the board handle
    - reads and saves board descriptor entries

    The following descriptor keys are used:

    Deskriptor key           Default          Range
    -----------------------  ---------------  -------------
    DEBUG_LEVEL_DESC         OSS_DBG_DEFAULT  see dbg.h
    DEBUG_LEVEL              OSS_DBG_DEFAULT  see dbg.h
    PCI_BUS_NUMBER           
    PCI_DEVICE_NUMBER        
    DEVICE_ID_n  (n=0..15)   -                0...31          
    AUTOENUM                 0                0,1          
    AUTOENUM_EXCLUDING       -                see chameleon.h          

Input:
    osHdl     pointer to os specific structure             
    descSpec  pointer to os specific descriptor specifier  
    hP        pointer to not initialized board handle structure            

Output:
    *hP       initialized board handle structure  
    return    0 | error code


Function CHAMELEON_BrdInit()
----------------------------

Syntax:
    static int32 CHAMELEON_BrdInit(
        BBIS_HANDLE     *h )

Description:
    Board initialization.

    Look for chameleon FPGA.
    For each module specified in descriptor, look for that module and save
    information about it.

Input:
    h         pointer to board handle structure    

Output:
    return    0 | error code


Function CHAMELEON_BrdExit()
----------------------------

Syntax:
    static int32 CHAMELEON_BrdExit(
        BBIS_HANDLE     *h )

Description:
    Board deinitialization.

    Do nothing

Input:
    h         pointer to board handle structure   

Output:
    return    0 | error code


Function CHAMELEON_Exit()
-------------------------

Syntax:
    static int32 CHAMELEON_Exit(
        BBIS_HANDLE     **hP )

Description:
    Cleanup memory.

    - deinitializes the bbis handle

Input:
    hP        pointer to board handle structure

Output:
    *hP       NULL
    return    0 | error code


Function CHAMELEON_BrdInfo()
----------------------------

Syntax:
    static int32 CHAMELEON_BrdInfo(
        u_int32 code,
        ... )

Description:
    Get information about hardware and driver requirements.

    Following info codes are supported:

    Code                      Description
    ------------------------  -----------------------------
    BBIS_BRDINFO_BUSTYPE      board bustype
    BBIS_BRDINFO_DEVBUSTYPE   device bustype
    BBIS_BRDINFO_FUNCTION     used optional functions
    BBIS_BRDINFO_NUM_SLOTS    number of slots
    BBIS_BRDINFO_INTERRUPTS   interrupt characteristics
    BBIS_BRDINFO_ADDRSPACE    address characteristic
    BBIS_BRDINFO_BRDNAME      name of the board hardware

    The BBIS_BRDINFO_BUSTYPE code returns the bustype of
    the specified board. (here always PCI)

    The BBIS_BRDINFO_DEVBUSTYPE code returns the bustype of
    the specified device - not the board bus type. 
    (here always NONE)

    The BBIS_BRDINFO_FUNCTION code returns the information
    if an optional BBIS function is supported or not.

    The BBIS_BRDINFO_NUM_SLOTS code returns the number of
    devices used from the driver. (CHAMELEON BBIS: always 16)

    The BBIS_BRDINFO_INTERRUPTS code returns the supported
    interrupt capability (BBIS_IRQ_DEVIRQ/BBIS_IRQ_EXPIRQ)
    of the specified device.

    The BBIS_BRDINFO_ADDRSPACE code returns the address
    characteristic (OSS_ADDRSPACE_MEM/OSS_ADDRSPACE_IO)
    of the specified device.

    The BBIS_BRDINFO_BRDNAME code returns the short hardware
    name and type of the board without any prefix or suffix.
    The hardware name must not contain any non-printing
    characters. The length of the returned string, including
    the terminating null character, must not exceed
    BBIS_BRDINFO_BRDNAME_MAXSIZE.
    Examples: D201 board, PCI device, Chameleon FPGA 

Input:
    code      reference to the information we need    
    ...       variable arguments                      

Output:
    *...      variable arguments
    return    0 | error code


Function CHAMELEON_CfgInfo()
----------------------------

Syntax:
    static int32 CHAMELEON_CfgInfo(
        BBIS_HANDLE     *h,
        u_int32         code,
        ... )

Description:
    Get information about board configuration.

    Following info codes are supported:

    Code                      Description
    ------------------------  ------------------------------
    BBIS_CFGINFO_BUSNBR       PCI bus number
    BBIS_CFGINFO_IRQ          interrupt parameters
    BBIS_CFGINFO_EXP          exception interrupt parameters
    BBIS_CFGINFO_SLOT         slot information

    The BBIS_CFGINFO_BUSNBR code returns the number of the
    bus on which the specified device resides

    The BBIS_CFGINFO_IRQ code returns the device interrupt
    vector, level and mode of the specified device.

    The BBIS_CFGINFO_EXP code returns the exception interrupt
    vector, level and mode of the specified device.

    The BBIS_CFGINFO_SLOT code returns the following
    information about the specified device slot:
    The slot is occupied or empty, the device id and device
    revision of the plugged device, the name of the slot and
    the name of the plugged device.

Input:
    h         pointer to board handle structure       
    code      reference to the information we need    
    ...       variable arguments                      

Output:
    .....:  ...       variable arguments
            return    0 | error code


Function CHAMELEON_IrqEnable()
------------------------------

Syntax:
    static int32 CHAMELEON_IrqEnable(
        BBIS_HANDLE     *h,
        u_int32         mSlot,
        u_int32         enable )

Description:
    Interrupt enable / disable.

    Do nothing

Input:
    h         pointer to board handle structure   
    mSlot     module slot number                  
    enable    interrupt setting                   

Output:
    return    0


Function CHAMELEON_IrqSrvInit()
-------------------------------

Syntax:
    static int32 CHAMELEON_IrqSrvInit(
        BBIS_HANDLE     *h,
        u_int32         mSlot)

Description:
    Called at the beginning of an interrupt.

    Do nothing

Input:
    h         pointer to board handle structure   
    mSlot     module slot number                  

Output:
    return    BBIS_IRQ_UNK


Function CHAMELEON_IrqSrvExit()
-------------------------------

Syntax:
    static void CHAMELEON_IrqSrvExit(
        BBIS_HANDLE     *h,
        u_int32         mSlot )

Description:
    Called at the end of an interrupt.

    Do nothing

Input:
    h         pointer to board handle structure   
    mSlot     module slot number                  

Output:
    ---


Function CHAMELEON_ExpEnable()
------------------------------

Syntax:
    static int32 CHAMELEON_ExpEnable(
        BBIS_HANDLE     *h,
        u_int32         mSlot,
        u_int32         enable)

Description:
    Exception interrupt enable / disable.

    Do nothing

Input:
    h         pointer to board handle structure   
    mSlot     module slot number                  
    enable    interrupt setting                   

Output:
    return    0


Function CHAMELEON_ExpSrv()
---------------------------

Syntax:
    static int32 CHAMELEON_ExpSrv(
        BBIS_HANDLE     *h,
        u_int32         mSlot )

Description:
    Called at the beginning of an exception interrupt.

    Do nothing

Input:
    h         pointer to board handle structure   
    mSlot     module slot number                  

Output:
    return    BBIS_IRQ_NO


Function CHAMELEON_SetMIface()
------------------------------

Syntax:
    static int32 CHAMELEON_SetMIface(
        BBIS_HANDLE     *h,
        u_int32         mSlot,
        u_int32         addrMode,
        u_int32         dataMode)

Description:
    Set device interface.

    Do nothing

Input:
    h         pointer to board handle structure   
    mSlot     module slot number                  
    addrMode  MDIS_MODE_A08 | MDIS_MODE_A24       
    dataMode  MDIS_MODE_PCI6 | MDIS_MODE_D32       

Output:
    return    0


Function CHAMELEON_ClrMIface()
------------------------------

Syntax:
    static int32 CHAMELEON_ClrMIface(
        BBIS_HANDLE     *h,
        u_int32         mSlot)

Description:
    Clear device interface.

    Do nothing

Input:
    h         pointer to board handle structure   
    mSlot     module slot number                  

Output:
    return    0


Function CHAMELEON_GetMAddr()
-----------------------------

Syntax:
    static int32 CHAMELEON_GetMAddr(
        BBIS_HANDLE     *h,
        u_int32         mSlot,
        u_int32         addrMode,
        u_int32         dataMode,
        void            **mAddr,
        u_int32         *mSize )

Description:
    Get physical address description.

    - check device number
    - assign address spaces

Input:
    h         pointer to board handle structure   
    mSlot     module slot number                  
    addrMode  MDIS_MODE_A08 | MDIS_MODE_A24    
    dataMode  MDIS_MODE_PCI6 | MDIS_MODE_D32      
    mAddr     pointer to address space            
    mSize     size of address space               

Output:
    return    0 | error code


Function CHAMELEON_SetStat()
----------------------------

Syntax:
    static int32 CHAMELEON_SetStat(
        BBIS_HANDLE     *h,
        u_int32         mSlot,
        int32           code,
        int32           value )

Description:
    Set driver status

    Following status codes are supported:

    Code                 Description                Values
    -------------------  -------------------------  ----------
    M_BB_DEBUG_LEVEL     board debug level          see dbg.h

Input:
    h         pointer to board handle structure           
    mSlot     module slot number                          
    code      setstat code                                
    value     setstat value or ptr to blocksetstat data   

Output:
    return    0 | error code


Function CHAMELEON_GetStat()
----------------------------

Syntax:
    static int32 CHAMELEON_GetStat(
        BBIS_HANDLE     *h,
        u_int32         mSlot,
        int32           code,
        int32           *valueP )

Description:
    Get driver status

    Following status codes are supported:

    Code                 Description                Values
    -------------------  -------------------------  ----------
    M_BB_DEBUG_LEVEL     driver debug level         see dbg.h
    M_MK_BLK_REV_ID      ident function table ptr   -

Input:
    h         pointer to board handle structure           
    mSlot     module slot number                          
    code      getstat code                                

Output:
    valueP    getstat value or ptr to blockgetstat data
    return    0 | error code

