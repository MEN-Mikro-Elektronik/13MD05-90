Function Description
====================
Tue Apr 27 14:26:41 MEST 1999
 
Overview of all Functions
-------------------------

MBUF_Ident             - Gets the pointer to ident string. 
MBUF_Create            - Allocates memory for the buffer structure and initializes 
MBUF_Remove            - Frees the allocated memory MBUF_HANDLE and buffer. 
MBUF_Write             - Writes size of bytes to a buffer in LL-Drv setblock. 
MBUF_Read              - Reads size of bytes from a buffer in LL-Drv getblock. 
MBUF_GetBufferMode     - Gets the buffer mode. 
MBUF_GetNextBuf        - Gets the in or out buffer in LL-drv ISR. 
MBUF_ReadyBuf          - Signals end of block rd or wr access to buffer in LL-drv ISR. 
MBUF_EventHdlrInst     - Installs buffer event handler 
MBUF_SetStat           - Handles set and blocksetstats to the read or write buffer. 
MBUF_GetStat           - Handles get and blockgetstats to the read or write buffer. 
 

Function MBUF_Ident()
---------------------

Syntax:
    char* MBUF_Ident( void )

Description:
    Gets the pointer to ident string.

Input:
    -

Output:
    return  pointer to ident string


Function MBUF_Create()
----------------------

Syntax:
    int32 MBUF_Create
    (
        OSS_HANDLE      *osHdl,
        OSS_SEM_HANDLE  *devSem,
        void*           lldrvHdl,
        int32           size,
        int32           width,
        int32           mode,
        int32           direction,
        int32           lowHighWater,
        int32           timeout,
        OSS_IRQ_HANDLE  *irqHdl,
        MBUF_HANDLE     **bufHdlP
    )

Description:
    Allocates memory for the buffer structure and initializes
    the structure. Allocates also a buffer with size bytes and
    stores the osHdl and the devSem.

    system requirements:
       one semaphore per buffer

    NOTE: size should be multiple of width

Input:
    osHdl        pointer to a os specific struct
    devSem       device semaphore handle for blocking
    size         whole buffer size [bytes]
    width        buffer width [bytes]
    mode         M_BUF_CURRBUF | M_BUF_RINGBUF
                 | M_BUF_RINGBUF_OVERWR (only read direction)
    direction    buffer to create MBUF_RD | MBUF_WR
    lowHighWater buffer low/highwater mark (0..size) 
    timeout      buffer timeout [msec] (0=endless)

Output:
    bufHdlP      pointer to created buffer handle
    return       0 | error code


Function MBUF_Remove()
----------------------

Syntax:
    int32 MBUF_Remove
    (
        MBUF_HANDLE** bufHdlP
    )

Description:
    Frees the allocated memory MBUF_HANDLE and buffer.
    Remove the created buffer semaphore and installed signal.
    Set the handle pointer to 0.

Input:
    bufHdlP   pointer to created buffer handle

Output:
    bufHdlP   0
    return    0 | error code


Function MBUF_Write()
---------------------

Syntax:
    int32 MBUF_Write
    (
        MBUF_HANDLE*    bufHdl,
        u_int8*         buffer,
        u_int32         size,
        int32*          nbrWrBytesP
    )

Description:
    Writes size of bytes to a buffer in LL-Drv setblock.

    In M_BUF_RINGBUF mode the fill pointer and count counters
    are incremented.
    Checks the underrun error, if error enabled clear it and
    return with error code.
    If buffer full in M_BUF_RINGBUF mode it gives the isr a
    chance to make space.
       unmask IRQ
       release devSem (other routines then M_setblock can work)
       claim   bufSem  (is empty first, IRQ release or timeout)
       claim   devSem
       mask   IRQ
       check  timeout or signal occured -> error
       check  is space now, if not do it again

    NOTE: Size should be multiple of width in M_BUF_RINGBUF mode
          or equal width in M_BUF_CURRBUF mode.
          Buffer direction should be MBUF_DIR_OUT.
          BufferMode should be M_BUF_CURRBUF | M_BUF_RINGBUF.

Input:
    bufHdl      buffer handle
    buffer      source buffer
    size        nbr of bytes to write

Output:
    nbrWrBytesP nbr of written bytes
    return      0 | error code


Function MBUF_Read()
--------------------

Syntax:
    int32 MBUF_Read
    (
        MBUF_HANDLE*    bufHdl,
        u_int8*         buffer,
        u_int32         size,
        int32*          nbrRdBytesP
    )

Description:
    Reads size of bytes from a buffer in LL-Drv getblock.

    In M_BUF_RINGBUF mode the empty pointer is incremented and
    count counter is decremented.
    Checks the overflow error, if error enabled clear it and
    return with error code.
    If buffer empty in M_BUF_RINGBUF mode it gives the isr a
    chance to fill the buffer.
       unmask IRQ
       release devSem (other routines then M_setblock can work)
       claim   bufSem  (is empty first, IRQ release or timeout)
       claim   devSem
       mask   IRQ
       check  timeout or signal occured -> error
       check  there are data now, if not do it again

    NOTE: Size should be multiple of width.
          Buffer direction should be MBUF_DIR_IN.
          Buffer mode can be M_BUF_CURRBUF | M_BUF_RINGBUF
          | M_BUF_RINGBUF_OVERWR.

Input:
    bufHdl      buffer handle
    buffer      source buffer
    size        nbr of bytes to write

Output:
    nbrRdBytesP  nbr of read bytes
    return       0 | error code


Function MBUF_GetBufferMode()
-----------------------------

Syntax:
    int32 MBUF_GetBufferMode
    (
        MBUF_HANDLE* bufHdl,
        int32*       modeP
    )

Description:
    Gets the buffer mode.

Input:
    bufHdl    buffer handle

Output:
    modeP     buffer mode
    return    0 | error code


Function MBUF_GetNextBuf()
--------------------------

Syntax:
    void* MBUF_GetNextBuf
    (
        MBUF_HANDLE  *bufHdl,
        int32        size,
        int32        *gotsizeP
    )

Description:
    Gets the in or out buffer in LL-drv ISR.

    for direction MBUF_RD in M_BUF_RINGBUF mode
    - if no space and error is enabled
      sets the error flag and increments the error count
    - increment fill pointer + width
    - increment buffer count + width

    for direction MBUF_RD in M_BUF_RINGBUF_OVERWR mode
    - if no space increment fill and empty pointer
    - increment fill pointer + width
    - increment buffer count + width

    for direction MBUF_WR  in M_BUF_RINGBUF mode
    - if count <= 0 and error is enabled
      sets the error flag and increments the error count
    - increment empty pointer + width
    - decrement buffer count - width

    NOTE: -should only be called within irq service !
          -*gotsizeP may be lesser then size if the end
           of ring buffer is reached, then call again
          -unit of size IS NOT BYTE!

Input:
    bufHdl      buffer handle
    size      in width

Output:
    gotsizeP  in width
    return
       0 no buffer availible
       start of buffer      in M_BUF_CURRBUF mode
       next buffer          in M_BUF_RINGBUF mode
       next buffer          in M_BUF_RINGBUF_OVERWR mode


Function MBUF_ReadyBuf()
------------------------

Syntax:
    int32 MBUF_ReadyBuf(   MBUF_HANDLE* bufHdl )

Description:
    Signals end of block rd or wr access to buffer in LL-drv ISR.
    Ever:
       - the bufSem semaphore is released (signaled)
    If lowHighWater is reached:
       - a signal is sended if installed
       - the event handler is called if installed

    NOTE: should only be called within irq service !

Input:
    bufHdl      buffer handle

Output:
    0 | error code


Function MBUF_EventHdlrInst()
-----------------------------

Syntax:
    int32 MBUF_EventHdlrInst
    (
        MBUF_HANDLE    *bufHdl,
        int32          (*handler)( void*    lldrvHdl
                                  ,u_int32 ev_flags),
        int32          flags
    )

Description:
    Installs buffer event handler
    (already installed handler will be overwritten)
    Masks IRQ first and unmask after installing.

Input:
    bufHdl      buffer handle
    handler    event handler function
    flags      event flags to service (MBUF_EV_empty,
                                       MBUF_EV_full,
                                       MBUF_EV_newspace,
                                       MBUF_EV_newdata )

Output:
    0 | error code


Function MBUF_SetStat()
-----------------------

Syntax:
    int32 MBUF_SetStat
    (
        MBUF_HANDLE *rdBufHdl,
        MBUF_HANDLE *wrBufHdl,
        int32       code,
        int32       value
    )

Description:
    Handles set and blocksetstats to the read or write buffer.

Input:
    rdBufHdl  read  buffer handle or NULL
    wrBufHdl  write buffer handle or NULL
    code      setstat code
    value     setstat value

Output:
    return    0 | error code


Function MBUF_GetStat()
-----------------------

Syntax:
    int32 MBUF_GetStat
    (
        MBUF_HANDLE  *rdBufHdl,
        MBUF_HANDLE  *wrBufHdl,
        int32        code,
        int32        *valueP
    )

Description:
    Handles get and blockgetstats to the read or write buffer.

Input:
    rdBufHdl  read  buffer handle or NULL
    wrBufHdl  write buffer handle or NULL
    code      getstat code
    value     getstat value

Output:
    return    0 | error code

