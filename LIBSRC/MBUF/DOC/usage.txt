Buffer Routines
===============
01.10.98 see

The driver can allocate an input and/or output buffer for each channel. 

Sample code for handling an input buffer
----------------------------------------

typedef struct {
    ...
    MBUF_HANDLE     *bufHdl;        /* input buffer handle */
} LL_HANDLE;

Init()
{
    ...

    /* DEBUG_LEVEL_MBUF */
    if ((error = DESC_GetUInt32(llHdl->descHdl, OSS_DBG_DEFAULT, 
                                &bufDbgLevel, "DEBUG_LEVEL_MBUF")) &&
        error != ERR_DESC_KEY_NOTFOUND)
        return( Cleanup(llHdl,error) );

    /* install buffer (if used) */
    if (bufSize != 0) {
        /* create input buffer */
        if ((error = MBUF_Create(llHdl->osHdl, devSemHdl, llHdl, 
                                 bufSize, 1, bufMode, MBUF_RD,
                                 bufHigh, bufTout, irqHdl, &llHdl->bufHdl)))
            return( Cleanup(llHdl,error) );

        /* set debug level */
        MBUF_SetStat(llHdl->bufHdl, NULL, M_BUF_RD_DEBUG_LEVEL, bufDbgLevel);
    }
}

Exit/Cleanup()
{
    ...

    /* clean up buffer */
    if (llHdl->bufHdl)
        MBUF_Remove(&llHdl->bufHdl);
}

SetStat()
{
    ...

    switch(code) {
        /* handle MBUF codes */
        default:
            if (M_BUF_CODE(code))
                error = MBUF_SetStat(llHdl->bufHdl, NULL, code, value);
            else
                error = ERR_LL_UNK_CODE;
   }
}

GetStat()
{
    ...

    switch(code) {
        /* handle MBUF codes */
        default:
            if (M_BUF_CODE(code))
                error = MBUF_GetStat(llHdl->bufHdl, NULL, code, valueP);
            else
                error = ERR_LL_UNK_CODE;
}

BlockRead()
{
    /* get current buffer mode */
    if ((error = MBUF_GetBufferMode(llHdl->bufHdl, &bufMode)))
        return(error);

    /* read from hardware */
    if (bufMode == M_BUF_USRCTRL) {
        ...
    }
    /* read from buffer */
    else {
        if ((error = MBUF_Read(llHdl->bufHdl, bufP, size, nbrRdBytesP)))
            return(error);
    }
}

Irq()
{
    ...

    /* get buffer ptr - overrun ? */ 
    if ((bufP = (u_int8*)MBUF_GetNextBuf(llHdl->bufHdl, 1, &got)) == NULL)
        break;

    /* fill buffer entry */
    *bufP = MREAD_D8(llHdl->ma, DATA_REG);

    /* say: buffer written */
    MBUF_ReadyBuf(llHdl->bufHdl);
}


