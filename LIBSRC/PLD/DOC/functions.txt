Function Description
====================
Tue Apr 27 14:55:57 MEST 1999
 
Overview of all Functions
-------------------------

PLD_ErrorMsg           - Return PLD error message string 
PLD_FLEX10K_Identify   - Return loader identify string 
PLD_FLEX10K_LoadCallBk - Loading FLEX 10K with binary data (via callback i/o) 
PLD_FLEX10K_LoadDirect - Loading FLEX 10K with binary data (via direct access) 
 

Function PLD_ErrorMsg()
-----------------------

Syntax:
    char *PLD_ErrorMsg(int32 error)

Description:
    Return PLD error message string

Input:
    error      PLD_ERR_xxx error number

Output:
    return     pointer to error message


Function PLD_FLEX10K_Identify()
-------------------------------

Syntax:
    const char *PLD_FLEX10K_Identify( void )

Description:
    Return loader identify string

Input:
    -

Output:
    return     identify string


Function PLD_FLEX10K_LoadCallBk()
---------------------------------

Syntax:
    int32 PLD_FLEX10K_LoadCallBk(
        u_int8  *buf,
        u_int32 size,
        u_int32 flags,
        void *arg,
        void (*msec_delay)(void *arg, u_int32 msec),
        u_int8 (*get_status)(void *arg),
        u_int8 (*get_cfgdone)(void *arg),
        void (*set_data)(void *arg, u_int8 state),
        void (*set_dclk)(void *arg, u_int8 state),
        void (*set_config)(void *arg, u_int8 state))

Description:
    Loading FLEX 10K with binary data (via callback i/o)
    PLD interface access is done via callback functions.
    A user-defineable pointer is passed to all callback functions.

    The PLD data array passed to the loader function must 
    contain the data from the .TTF file as raw byte stream.
    (Conversion can be done with the TTF2ARR tool)

    NOTE: This function is for complicated PLD interfaces,
          where PLD bits are located in different registers.

    -----------------------------------------------------------
    Callback functions required:
    -----------------------------------------------------------
    void (*msec_delay)(void *arg, u_int32 msec)

    Input:      arg       passed argument
                msec      delay time in [msec] (0=none)
    Output:     -

    msec_delay() waits for the specified time and may not be
    aborted by signals. The time may be rounded up to the
    system ticker resolution.
    -----------------------------------------------------------
    u_int8 (*get_status)(void *arg)
    u_int8 (*get_cfgdone)(void *arg)

    Input:      arg       passed argument
    Output:     return    bit state (0=low, 1=high)

    get_xxx() functions return the current state of a bit from
    the PLD interface.
    -----------------------------------------------------------
    void (*set_data)(void *arg, u_int8 state)
    void (*set_dclk)(void *arg, u_int8 state)
    void (*set_config)(void *arg, u_int8 state)

    Input:      arg       passed argument
                state     bit state (0=low, 1=high)
    Output:     -

    set_xxx() functions set a bit of the PLD interface to
    the specified state.
    -----------------------------------------------------------

Input:
    buf         PLD data array
    size        PLD data size [byte]
    flags       loader flags
                PLD_FIRSTBLOCK = load first data block
                PLD_LASTBLOCK  = load last  data block
    arg         argument passed to all callback functions 
    msec_delay  callback function for delay
    get_status  callback function for PLD bit reading
    get_cfgdone callback function for PLD bit reading
    set_data    callback function for PLD bit writing
    set_dclk    callback function for PLD bit writing
    set_config  callback function for PLD bit writing

Output:
    return      0                 success
                PLD_ERR_NOTFOUND  no response (CONF_DONE timeout)
                PLD_ERR_INIT      init error (STATUS timeout)
                PLD_ERR_LOAD      load error (STATUS error)
                PLD_ERR_TERM      term error (CONF_DONE timeout)


Function PLD_FLEX10K_LoadDirect()
---------------------------------

Syntax:
    int32 PLD_FLEX10K_LoadDirect(
        MACCESS *ma, 
        u_int8  *buf,
        u_int32 size,
        u_int32 flags,
        void *arg,
        void (*msec_delay)(void *arg, u_int32 msec),
        u_int16 nonpld_bits,
        u_int8 data, 
        u_int8 dclk, 
        u_int8 config, 
        u_int8 status, 
        u_int8 cfgdone)

Description:
    Loading FLEX 10K with binary data (via direct access) 
    PLD interface access is done via direct D16 register access.
    A user-defineable pointer is passed to the callback function.

    A mask specifies the state written to the non-PLD bits
    during the loading process.

    The PLD data array passed to the loader function must 
    contain the data from the .TTF file as raw byte stream.
    (Conversion can be done with the TTF2ARR tool)

    NOTE: This function is for simple PLD interfaces,
          where all PLD bits are located in one register.

    -----------------------------------------------------------
    Callback function required:
    -----------------------------------------------------------
    void (*msec_delay)(void *arg, u_int32 msec)

    Input:      arg       passed argument
                msec      delay time in [msec] (0=none)
    Output:     -

    msec_delay() waits for the specified time and may not be
    aborted by signals. The time may be rounded up to the
    system ticker resolution.
    -----------------------------------------------------------

Input:
    ma          PLD interface access pointer (D16 access)
    buf         PLD data array
    size        PLD data size [byte]
    flags       loader flags
                PLD_FIRSTBLOCK = load first data block
                PLD_LASTBLOCK  = load last  data block
    arg         argument passed to callback function
    msec_delay  callback function for delay
    nonpld_bits non-PLD bits state
    data        DATA      bit location (0..15: D0..D15)
    dclk        DCLK      bit location (0..15: D0..D15)
    config      CONFIG    bit location (0..15: D0..D15)
    status      STATUS    bit location (0..15: D0..D15)
    cfgdone     CFGDONE   bit location (0..15: D0..D15)

Output:
    return      0             success
                PLD_ERR_NOTFOUND  no response (CONF_DONE timeout)
                PLD_ERR_INIT      init error (STATUS timeout)
                PLD_ERR_LOAD      load error (STATUS error)
                PLD_ERR_TERM      term error (CONF_DONE timeout)

